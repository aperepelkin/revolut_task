import groovy.xml.MarkupBuilder
import org.jooq.codegen.GenerationTool

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.jooq:jooq-codegen:3.11.4'
        classpath 'org.jooq:jooq-meta-extensions:3.11.4'
    }
}

plugins {
    id "org.flywaydb.flyway" version "5.1.4"
}

group 'ru.aperepelkin.revolut'
version '1.0'

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
mainClassName = "ru.aperepelkin.revolut.account.Application"

repositories {
    mavenCentral()
}

dependencies {
    runtime 'com.h2database:h2:1.4.197'
    runtime 'org.slf4j:slf4j-jdk14:1.7.25'

    testCompile 'org.testng:testng:6.14.3'
    testCompile 'org.hamcrest:hamcrest-core:1.3'

    compile 'org.glassfish.jersey.inject:jersey-cdi2-se:2.27'

    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.27'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.6'
    compile 'org.glassfish.grizzly:grizzly-http-server:2.4.3'
    compile 'org.apache.commons:commons-lang3:3.8'
    compile 'org.flywaydb:flyway-core:5.1.4'
    compile 'com.zaxxer:HikariCP:3.2.0'
    compile 'org.jooq:jooq:3.11.4'
}

flyway {
    url = 'jdbc:h2:mem:accounts'
}

task generate(dependsOn: 'flywayMigrate') {

    doLast {
        def writer = new StringWriter()
        new MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
            generator() {
                database() {
                    name("org.jooq.meta.extensions.ddl.DDLDatabase")
                    includeSequences true
                    properties([:]) {
                        property() {
                            key("scripts")
                            value("src/main/resources/db/migration/V1.0__account.sql")
                        }
                        property() {
                            key("sort")
                            value("semantic")
                        }
                        property() {
                            key("dialect")
                            value("H2")
                        }
                    }
                }

                generate([:]) {

                }
                target() {
                    packageName('ru.aperepelkin.revolut.account.jooq')
                    directory('src/main/java')
                }
            }
        }
        GenerationTool.generate(writer.toString())
    }
}

assembleDist {
    dependsOn test
}

test {
    useTestNG()
}